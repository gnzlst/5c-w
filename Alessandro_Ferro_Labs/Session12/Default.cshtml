@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Home Page";
}

@{ 
    // Create the variables...
    // Remember: This password is just being shown to show the actual text being passed,
    // In real applications you shouldn't show the password to the User.
    var password = "";
    var hashed = "";
    var sha256 = "";
    var sha1 = "";

    var salt = "";

    var hashedPassword = "";
    var verify = false;

    // If the request is a POST request, then
    if (IsPost)
    {
        // Get the password
        password = Request.Form["password"];

        // Run the functions on the code
        hashed = Crypto.Hash(password, "MD5");
        sha256 = Crypto.SHA256(password);
        sha1 = Crypto.SHA1(password);

        salt = Crypto.GenerateSalt();

        hashedPassword = Crypto.HashPassword(password);
    }
}

<form method="post">
    <p>Write the string as a password that would be encrypted using
    <span style="color: #0094ff; font-family: Consolas;"> Crypto</span>
    class of ASP.NET Web Pages.</p>

    <input type="password" name="password" autofocus />
    <input type="submit" value="Submit" />
</form>

<div>
    <p>Password: @password</p>
    <p>MD5 Hashed result: @hashed</p>
    <p>SHA256 result: @sha256</p>
    <p>SHA1 result: @sha1</p>
    <p>Salt: @salt</p>
    <p>HashedPassword: @hashedPassword</p>
    <p>Verify: @verify.ToString()</p>
</div>

<!--
    SALTING THE PASSWORD
        
    For the exercise I used both times the same password (Alessandro).
    In both cases, the MD5 result, the SHA256 result and the SHA1 result
    stayed the same.
    However the generated salt, and consequently the HashedPassword, did change,
    indicating that the salting worked properly.
-->